# Libraries
import json
import datetime
from croniter import croniter
from murci import Murci


# Main code
def lambda_handler(event, context) -> dict:
    """
    Main lambda function generated by default.

    :param event: The data from the event that triggered the function
    :param contex: The data about the execution environment of the function
    :param return: json body and status code
    """
    # Load murci bot
    murci = Murci()
    
    # Load the file
    config_file = 'config.json'
    
    with open(config_file) as file:
        dct = json.load(file)
    print(f"Loaded file {config_file}")
    print(dct)
    
    # Sum the total expends for the next month
    monthly_expenses = dict()
    total_expenses = 0
    for k, v in dct.items():
    
        # Extract payment month
        cron = v['frecuencia']
        executed = executed_this_week(cron)
        
        # Add to total expenses if executed next month
        if executed:
            total_expenses += v["importe"]
            monthly_expenses[v["nombre"]] = v["importe"]
    print("Monthly expenses filtered successfully")
    
    
    if monthly_expenses:
        # Generate message to send
        message = f"**RECIBOS DE LA SEMANA** \nRecordad que esta semana se cargarÃ¡n los siguientes recibos a vuestra cuenta ðŸ’¸**\n---"
        for k, v in monthly_expenses.items():
            message_expense = f"- El gasto de {k}: {v} â‚¬"
            message = message + "\n" + message_expense
    else:
        message = "RECIBOS DE LA SEMANA\nÂ¡Felicidades, Carlos y Paula! ðŸŽ‰ðŸ¥³ Esta semana vuestros recibos decidieron tomarse unas vacaciones. Â¡Hora de brindar por ello!"
        
    print(f"Message send: {message}")
    murci.send_message(message)

    return {
        'statusCode': 200,
        'body': None
    }


def executed_this_week(cron: str) -> bool:
    """
    Check if the next planned run matches the next week

    :param cron: cron string in unix format (5 digits)
    :return: True if the next run matches the next month
    """
    
    # Generates the first day of the next week as datetime
    now = datetime.datetime.now()
    cron = croniter(cron, now)
    next_date = cron.get_next(datetime.datetime)
    
    # Get the start and end of the current week
    start_of_week = now - datetime.timedelta(days=now.weekday())
    end_of_week = start_of_week + datetime.timedelta(days=6)
    
    return start_of_week <= next_date <= end_of_week